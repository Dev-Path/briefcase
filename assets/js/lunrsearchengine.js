
var documents = [{
    "id": 0,
    "url": "/jekyll-theme-memoirs/404.html",
    "title": "404",
    "body": "404 Page not found!Please use the search bar from the bottom left or visit our homepage! "
    }, {
    "id": 1,
    "url": "/jekyll-theme-memoirs/about",
    "title": "Learning Never Stops",
    "body": "This is a dedicated page for projects and what I have been working on My thoughts goes here &rarr; patrickkyei. com"
    }, {
    "id": 2,
    "url": "/jekyll-theme-memoirs/authors",
    "title": "Authors",
    "body": "{% for author in site. authors %}                       {% if author[1]. gravatar %}                {% else %}                {% endif %}                  {% if author[1]. web %}                       {% endif %}          {% if author[1]. twitter %}                      {% endif %}          {% if author[1]. email %}                      {% endif %}                                     {{ author[1]. display_name }}:         {{ author[1]. description }}                {% endfor %}"
    }, {
    "id": 3,
    "url": "/jekyll-theme-memoirs/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 4,
    "url": "/jekyll-theme-memoirs/contact",
    "title": "Contact",
    "body": "Please send your message to {{site. name}}. We will reply as soon as possible!   "
    }, {
    "id": 5,
    "url": "/jekyll-theme-memoirs/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 6,
    "url": "/jekyll-theme-memoirs/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 7,
    "url": "/jekyll-theme-memoirs/why-you-think-you-are-but-you-are-not/",
    "title": "Education must also train one for quick, resolute and effective thinking.",
    "body": "2021/09/10 - Memoirs theme has Prism highlighter integrated. I will show you in this post a few examples of how it looks if you are a developer planning to add pieces of code on your website. People think they see things as they are.  There’s a group of people who I think are somewhat self-aware who do agree that “Indeed, I’m sure I’m wrong about some things. I’m sure I have some biases,” because everyone does. We think we see things to be what they are. Also, I routinely see this contention on the web. In case somebody’s debating on Twitter, “I’m simply disclosing to you present reality. ” And it resembles, all things considered, they have their inclination and their political belief and thereafter a severe teaching, and some arrangement of realities that they sort of have misread. Furthermore, one may remark, “I’m only mentioning to you what’s straight before the entirety of our eyes,” and it’s rarely the equal. You know, we may get as philosophical as we need concerning how our brains construct reality, but at the end of the day, nobody truly appears to see things how they are. All we can do is get closer, right? Hold Your Identity Lightly: Attempt to carry your identity more lightly, try to retain a little bit more emotional distance from your beliefs. Thus you can in any case label yourself, you know, whatever it is you are, yet try to hold that all the more lightly. So that involves something like reminding yourself that label is changeable. So indeed, you are whatever you call yourself right now since that label describes your beliefs, but if you were to conclude that belief is wrong or harmful, then you would not hold those beliefs anymore. So essentially, you’re trying to make the label feel like just a label and not like a flag that you’re waving or a badge that you’re wearing.  There’s a category of people who I believe are somewhat more mindful who might somehow agree and say “Indeed, I’m certain I’m biased with regards to certain things, I’m certain I have a few inclinations,” since everybody does. Yet, there will never be a second where they’re similar to, “Gracious, indeed, this is a thing that I may be wrong about. ”  At the point when you’re wrong or when you’re biased, it never really feels like you are in the moment. So it takes some true sort of confidence in the external view that like, even though it seems like I’m most certainly right, there is some possibility that I’m not because everybody’s biased with regards to bunches of things and I’ve been biased in the past. Thus you need to sort of do that theoretical jump in your mind to override your certainty that for this situation you’re most certainly right.  Why We Misunderstand Arguments As People: We misunderstand arguments because our brains sort of match them with statements that we’ve heard before. So it’s so difficult to learn from arguments with people with various perspectives from you because I think we sort of anticipate that it should be more straightforward than it is.  By which, I mean, we will, in general, have this implicit assumption that well, assuming people are being sensible and arguing with the best of intentions, it ought to be clear who’s right, and that person should change their perspective. Thus assuming that doesn’t occur, you get disappointed, and you feel like, “Well, these people are being unreasonable and they’re stubborn and close-minded,” and you sort of discount them. That assumption kind of backfires and makes it harder for you to learn from disagreements because you think that everyone is being stubborn and close-minded.   Is My Mindset Tied To My Identity?: A lot of things, after all, come down to identity, don’t they? Our beliefs frequently shape our identity. Politics and religion are the most obvious examples of beliefs that become part of our identity. Being a liberal, traditionalist, libertarian, nonbeliever, or Baptist, for example, is part of our identities in the sense that we are proud to be a skeptic, a Baptist, or a liberal. We take it personally when someone disagrees with us on these topics, and it quickly becomes an attack on us as a person rather than an attack on something we happen to believe. As a result, it is customary not to bring up politics or religion during a social gathering or date.  All things equal, you want to let a few things into your identity as possible, if you need to have the option to think as clearly as could be expected. “I’ll try not to label myself in any way, so that my thinking isn’t skewed. As a result, I’m going to avoid using political labels. I’m going to try not to think of myself as a vegan or skeptic. ” The problem is that this isn’t a strategic option. Labels are helpful for simply expressing your beliefs and decisions. Furthermore, it’s probably not a good idea to reject all feelings of attachment to your political convictions. What Can I Do Instead?: So, instead, you can try to hold your identity more lightly, attempting to maintain a little bit more emotional distance from your beliefs. Thus, you can call yourself a skeptic or whatever you want; however, try to do so with caution. That entails things like reminding yourself that the label is conditional. So, yes, I’m a religious activist because it best describes my beliefs. But if I concluded that activism is wrong or harmful, I would cease to be an activist. So, essentially, you’re attempting to make the label feel like it’s just a label, rather than a flag you’re waving or a badge you’re wearing. What You Want To Consider: All things considered, I mean, it’s additionally for all intents and purposes if you would like to persuade anybody that they’re wrong, it’s simply an awful strategic choice to make your case in a very self-righteous and self-congratulatory way, because regardless of whether you are correct, regardless of whether you do have valid justifications for holding your belief, assuming you say it simply in a tone dribbling with loftiness, you’re not going to change anyone’s mind. No doubt I believe that is another — people often worry, “Well, you have to hold your belief strongly, or you’ll never change the world. You’ll never prevail upon hearts and minds,” - however practically speaking, more often than not, holding your beliefs strongly tied to your identity makes you worse at effecting change because it makes people not want to listen to you.  "
    }, {
    "id": 8,
    "url": "/jekyll-theme-memoirs/responsive-design/",
    "title": "Education must also train one for quick, resolute and effective thinking.",
    "body": "2021/09/07 - Memoirs theme has Prism highlighter integrated. I will show you in this post a few examples of how it looks if you are a developer planning to add pieces of code on your website. Resonspive Design with Media Queries: Media Queries are a new technique introduced in CSS3 that change the presentation of content based on different viewport sizes. The viewport is a user’s visible area of a web page, and is different depending on the device used to access the site. Media Queries consist of a media type, and if that media type matches the type of device the document is displayed on, the styles are applied. You can have as many selectors and styles inside your media query as you want. Here’s an example of a media query that returns the content when the device’s width is less than or equal to 100px: @media (max-width: 100px) { /* CSS Rules */ }and the following media query returns the content when the device’s height is more than or equal to 350px: @media (min-height: 350px) { /* CSS Rules */ }Remember, the CSS inside the media query is applied only if the media type matches that of the device being used. Responsive Image: Making images responsive with CSS is actually very simple. You just need to add these properties to an image: img { max-width: 100%; height: auto;}The max-width of 100% will make sure the image is never wider than the container it is in, and the height of auto will make the image keep its original aspect ratio. Responsive Typography: Make Typography ResponsivePassedInstead of using em or px to size text, you can use viewport units for responsive typography. Viewport units, like percentages, are relative units, but they are based off different items. Viewport units are relative to the viewport dimensions (width or height) of a device, and percentages are relative to the size of the parent container element. The four different viewport units are:  vw (viewport width): 10vw would be 10% of the viewport’s width.  vh (viewport height): 3vh would be 3% of the viewport’s height.  vmin (viewport minimum): 70vmin would be 70% of the viewport’s smaller dimension (height or width).  vmax (viewport maximum): 100vmax would be 100% of the viewport’s bigger dimension (height or width). Here is an example that sets a body tag to 30% of the viewport’s width. ems and rems: ems update the size of an element relative to the size of the parent element. rems update the size of an element with respect to root element, which is either the html or :: root element. body { width: 30vw; }CSS Flexbox: Placing the CSS property display: flex; on an element allows you to use other flex properties to build a responsive page. Adding display: flex to an element turns it into a flex container. This makes it possible to align any children of that element into rows or columns. You do this by adding the flex-direction property to the parent item and setting it to row or column. Creating a row will align the children horizontally, and creating a column will align the children vertically. Other options for flex-direction are row-reverse, column and column-reverse. Setting a flex container as a row places the flex items side-by-side from left-to-right. A flex container set as a column places the flex items in a vertical stack from top-to-bottom. For each, the direction the flex items are arranged is called the main axis. For a row, this is a horizontal line that cuts through each item. And for a column, the main axis is a vertical line through the items.  There are several options for how to space the flex items along the line that is the main axis. One of the most commonly used is justify-content: center;, which aligns all the flex items to the center inside the flex container. justify-content aligns flex items inside the flex container horizontally across the main axis. align-items aligns flex items inside the flex container vertically, from top to bottom. Flex properties:  flex-start: aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container. This is the default alignment if no justify-content is specified.  flex-end: aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.  space-between: aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the remaining space is distributed evenly among the other items.  space-around: similar to space-between but the first and last items are not locked to the edges of the container, the space is distributed around all the items with a half space on either end of the flex container. space-evenly: Distributes space evenly between the flex items with a full space at either end of the flex container center: align items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).  stretch: stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom. This is the default value if no align-items value is specified.  baseline: align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on. flex-wrap property tells CSS to wrap items. This means extra items move into a new row or column. The break point of where the wrapping happens depends on the size of the items and the size of the container. flex-wrap properties include nowrap, wrap, wrap-reverse. The flex-shrink property takes numbers as values. The higher the number, the more it will shrink compared to the other items in the container. For example, if one item has a flex-shrink value of 1 and the other has a flex-shrink value of 3, the one with the value of 3 will shrink three times as much as the other. The opposite of the flex-shrink is flex-grow. Grid-Properties: Turn any HTML element into a grid container by setting its display property to grid. This gives you the ability to use all the other properties associated with CSS Grid. Simply creating a grid element doesn’t get you very far. You need to define the structure of the grid as well. To add some columns to the grid, use the grid-template-columns property on a grid container as demonstrated below: . container { display: grid; grid-template-columns: 50px 50px;}grid-template-columns create the structues from top-to-bottom. To adjust the rows manually, use the grid-template-rows property in the same way you used grid-template-columns in the previous challenge. grid-column-gap creates a gap between the elements vice versa grip-row-gap grid-gap is a shorthand property for grid-row-gap and grid-column-gap To control the number of columns an item will consume, you can use the grid-column property in conjunction with the line numbers you want the item to start and stop at. Here’s an example: grid-column: 1 / 3;This will make the item start at the first vertical(this will move it across from left to right) line of the grid on the left and span to the 3rd line of the grid, consuming two columns vice versa grid-row. In CSS Grid, the content of each item is located in a box which is referred to as a cell. You can align the content’s position within its cell horizontally using the justify-self property on a grid item. By default, this property has a value of stretch, which will make the content fill the whole width of the cell. This CSS Grid property accepts other values as well: start: aligns the content at the left of the cell, center: aligns the content in the center of the cell, end: aligns the content at the right of the cell. align-self: aligns the content from top to bottom in the cell. Using justify-items on the parent container aligns all children items in one direction You can group cells of your grid together into an area and give the area a custom name. Do this by using grid-template-areas on the container like this: . container {  font-size: 40px;  min-height: 300px;  width: 100%;  background: LightGray;  display: grid;  grid-template-columns: 1fr 1fr 1fr;  grid-template-rows: 1fr 1fr 1fr;  grid-gap: 10px;  grid-template-areas:    header header header     advert content content     footer footer footer ; }The code above groups the cells of the grid into four areas; header, advert, content, and footer. Every word represents a cell and every pair of quotation marks represent a row. After creating an area template for your grid container, as shown in the previous challenge, you can place an item in your custom area by referencing the name you gave it. To do this, you use the grid-area property on an item like this: . item1 { grid-area: header;}This lets the grid know that you want the item1 class to go in the area named header. In this case, the item will use the entire top row because that whole row is named as the header area. The grid-area property you learned in the last challenge can be used in another way. If your grid doesn’t have an areas template to reference, you can create an area on the fly for an item to be placed like this: item1 { grid-area: 1/1/2/4; }This is using the line numbers you learned about earlier to define where the area for this item will be. The numbers in the example above represent these values: grid-area: horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at;So the item in the example will consume the rows between lines 1 and 2, and the columns between lines 1 and 4 repeat function repeats the number of rows or columns to the specified number. Here’s an example that would create the 100 row grid, each row at 50px tall. grid-template-rows: repeat(100, 50px);or grid-template-columns: repeat(2, 1fr 50px) 20px;or grid-template-columns: 1fr 50px 1fr 50px 20px;or grid-template-columns: repeat(3, minmax(90px, 1fr));There’s another built-in function to use with grid-template-columns and grid-template-rows called minmax. It’s used to limit the size of items when the grid container changes size. To do this you need to specify the acceptable size range for your item. Here is an example: grid-template-columns: 100px minmax(50px, 200px);The repeat function comes with an option called auto-fill. This allows you to automatically insert as many rows or columns of your desired size as possible depending on the size of the container. You can create flexible layouts when combining auto-fill with minmax, like this: repeat(auto-fill, minmax(60px, 1fr));When the container changes size, this setup keeps inserting 60px columns and stretching them until it can insert another one. Note: If your container can’t fit all your items on one row, it will move them down to a new one. auto-fit works almost identically to auto-fill. The only difference is that when the container’s size exceeds the size of all the items combined, auto-fill keeps inserting empty rows or columns and pushes your items to the side, while auto-fit collapses those empty rows or columns and stretches your items to fit the size of the container. Note: If your container can’t fit all your items on one row, it will move them down to a new one. In the second grid, use auto-fit with repeat to fill the grid with columns that have a minimum width of 60px and maximum of 1fr. Then resize the preview to see the difference. Media Screens: /*  ##Device = Desktops ##Screen = 1281px to higher resolution desktops*/@media (min-width: 1281px) {  /* CSS */ }/*  ##Device = Laptops, Desktops ##Screen = B/w 1025px to 1280px*/@media (min-width: 1025px) and (max-width: 1280px) {  /* CSS */ }/*  ##Device = Tablets, Ipads (portrait) ##Screen = B/w 768px to 1024px*/@media (min-width: 768px) and (max-width: 1024px) {  /* CSS */ }/*  ##Device = Tablets, Ipads (landscape) ##Screen = B/w 768px to 1024px*/@media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {  /* CSS */ }/*  ##Device = Low Resolution Tablets, Mobiles (Landscape) ##Screen = B/w 481px to 767px*/@media (min-width: 481px) and (max-width: 767px) {  /* CSS */ }/*  ##Device = Most of the Smartphones Mobiles (Portrait) ##Screen = B/w 320px to 479px*/@media (min-width: 320px) and (max-width: 480px) {  /* CSS */ }"
    }, {
    "id": 9,
    "url": "/jekyll-theme-memoirs/challenges-and-snippets/",
    "title": "Education must also train one for quick, resolute and effective thinking.",
    "body": "2021/09/05 - Memoirs theme has Prism highlighter integrated. I will show you in this post a few examples of how it looks if you are a developer planning to add pieces of code on your website. CSS:  When elements have a specified position, such as fixed or relative, the CSS offset properties right, left, top, and bottom can be used in animation rules to create movement. &lt;style&gt; div {  height: 40px;  width: 70%;  background: black;  margin: 50px auto;  border-radius: 5px;  position: relative; } #rect {  animation-name: rainbow;  animation-duration: 4s; } @keyframes rainbow {  0% {   background-color: blue;   top: 0px;   left: 0px;  }  50% {   background-color: green;   top: 50px;   left: 25px;  }  100% {   background-color: yellow;   top: 0px;   left:-25px;  } }&lt;/style&gt;&lt;div id= rect &gt;&lt;/div&gt; The opacity of the animated element gradually fades as it reaches the right side of the screen. In the displayed animation, the round element with the gradient background moves to the right by the 50% mark of the animation per the @keyframes rule. &lt;style&gt; #ball {  width: 70px;  height: 70px;  margin: 50px auto;  position: fixed;  left: 20%;  border-radius: 50%;  background: linear-gradient(   35deg,   #ccffff,   #ffcccc  );  animation-name: fade;  animation-duration: 3s; } @keyframes fade {  50% {   left: 60%;   opacity: 0. 1;  } }&lt;/style&gt;&lt;div id= ball &gt;&lt;/div&gt; The previous challenges covered how to use some of the animation properties and the @keyframes rule. Another animation property is the animation-iteration-count, which allows you to control how many times you would like to loop through the animation. Here’s an example&lt;style&gt; #ball {  width: 100px;  height: 100px;  margin: 50px auto;  position: relative;  border-radius: 50%;  background: linear-gradient(   35deg,   #ccffff,   #ffcccc  );  animation-name: bounce;  animation-duration: 1s;  animation-iteration-count: infinite; } @keyframes bounce{  0% {   top: 0px;  }  50% {   top: 249px;   width: 130px;   height: 70px;  }  100% {   top: 0px;  } }&lt;/style&gt;&lt;div id= ball &gt;&lt;/div&gt; You can change the animation rates for two similarly animated elements by altering their @keyframes rules. You can achieve the same goal by manipulating the animation-duration of multiple elements. In the animation running in the code editor, there are three stars in the sky that twinkle at the same rate on a continuous loop. To make them twinkle at different rates, you can set the animation-duration property to different values for each element. &lt;style&gt; . stars {  background-color: white;  height: 30px;  width: 30px;  border-radius: 50%;  animation-iteration-count: infinite; } . star-1 {  margin-top: 15%;  margin-left: 60%;  animation-duration: 1s;  animation-name: twinkle; } . star-2 {  margin-top: 25%;  margin-left: 25%;  animation-duration: 0. 9s;  animation-name: twinkle; } . star-3 {  margin-top: 10%;  margin-left: 50%;  animation-duration: 1. 1s;  animation-name: twinkle; } @keyframes twinkle {  20% {   transform: scale(0. 5);   opacity: 0. 5;  } } #back {  position: fixed;  padding: 0;  margin: 0;  top: 0;  left: 0;  width: 100%;  height: 100%;  background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6); }&lt;/style&gt;&lt;div id= back &gt;&lt;/div&gt;&lt;div class= star-1 stars &gt;&lt;/div&gt;&lt;div class= star-2 stars &gt;&lt;/div&gt;&lt;div class= star-3 stars &gt;&lt;/div&gt; In CSS animations, the animation-timing-function property controls how quickly an animated element changes over the duration of the animation. If the animation is a car moving from point A to point B in a given time (your animation-duration), the animation-timing-function says how the car accelerates and decelerates over the course of the drive. There are a number of predefined keywords available for popular options. For example, the default value is ease, which starts slow, speeds up in the middle, and then slows down again in the end. Other options include ease-out, which is quick in the beginning then slows down, ease-in, which is slow in the beginning, then speeds up at the end, or linear, which applies a constant animation speed throughout. &lt;style&gt; . balls {  border-radius: 50%;  background: linear-gradient(   35deg,   #ccffff,   #ffcccc  );  position: fixed;  width: 50px;  height: 50px;  margin-top: 50px;  animation-name: bounce;  animation-duration: 2s;  animation-iteration-count: infinite; } #ball1 {  left:27%;animation-timing-function: linear; } #ball2 {  left:56%;animation-timing-function: ease-out; } @keyframes bounce {  0% {   top: 0px;  }  100% {   top: 249px;  } }&lt;/style&gt;&lt;div class= balls  id= ball1 &gt;&lt;/div&gt;&lt;div class= balls  id= ball2 &gt;&lt;/div&gt; Use a Bezier Curve to Move a GraphicPassedA previous challenge discussed the ease-out keyword that describes an animation change that speeds up first and then slows down at the end of the animation. On the right, the difference between the ease-out keyword (for the blue element) and linear keyword (for the red element) is demonstrated. Similar animation progressions to the ease-out keyword can be achieved by using a custom cubic Bezier curve function. In general, changing the p1 and p2 anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time. Here’s an example of a Bezier curve using values to mimic the ease-out style: Remember that all cubic-bezier functions start with p0 at (0, 0) and end with p3 at (1, 1). In this example, the curve moves faster through the Y-axis (starts at 0, goes to p1 y value of 0, then goes to p2 y value of 1) than it moves through the X-axis (0 to start, then 0 for p1, up to 0. 58 for p2). As a result, the change in the animated element progresses faster than the time of the animation for that segment. Towards the end of the curve, the relationship between the change in x and y values reverses - the y value moves from 1 to 1 (no change), and the x values move from 0. 58 to 1, making the animation changes progress slower compared to the animation duration. &lt;style&gt; . balls{  border-radius: 50%;  position: fixed;  width: 50px;  height: 50px;  margin-top: 50px;  animation-name: bounce;  animation-duration: 2s;  animation-iteration-count: infinite; } #red {  background: red;  left: 27%;  animation-timing-function: cubic-bezier(0, 0, 0. 58, 1); } #blue {  background: blue;  left: 56%;  animation-timing-function: ease-out; } @keyframes bounce {  0% {   top: 0px;  }  100% {   top: 249px;  } }&lt;/style&gt;&lt;div class= balls  id=  red &gt;&lt;/div&gt;&lt;div class= balls  id=  blue &gt;&lt;/div&gt; Make Motion More Natural Using a Bezier CurvePassedThis challenge animates an element to replicate the movement of a ball being juggled. Prior challenges covered the linear and ease-out cubic Bezier curves, however neither depicts the juggling movement accurately. You need to customize a Bezier curve for this. The animation-timing-function automatically loops at every keyframe when the animation-iteration-count is set to infinite. Since there is a keyframe rule set in the middle of the animation duration (at 50%), it results in two identical animation progressions at the upward and downward movement of the ball. The following cubic Bezier curve simulates a juggling movement: cubic-bezier(0. 3, 0. 4, 0. 5, 1. 6);Notice that the value of y2 is larger than 1. Although the cubic Bezier curve is mapped on a 1 by 1 coordinate system, and it can only accept x values from 0 to 1, the y value can be set to numbers larger than one. This results in a bouncing movement that is ideal for simulating the juggling ball. &lt;style&gt; . balls {  border-radius: 50%;  position: fixed;  width: 50px;  height: 50px;  top: 60%;  animation-name: jump;  animation-duration: 2s;  animation-iteration-count: infinite; } #red {  background: red;  left: 25%;  animation-timing-function: linear; } #blue {  background: blue;  left: 50%;  animation-timing-function: ease-out; } #green {  background: green;  left: 75%;  animation-timing-function: cubic-bezier(0. 311, 0. 441, 0. 444, 1. 649); } @keyframes jump {  50% {   top: 10%;  } }&lt;/style&gt;&lt;div class= balls  id= red &gt;&lt;/div&gt;&lt;div class= balls  id= blue &gt;&lt;/div&gt;&lt;div class= balls  id= green &gt;&lt;/div&gt;"
    }, {
    "id": 10,
    "url": "/jekyll-theme-memoirs/product-resource-links/",
    "title": "Education must also train one for quick, resolute and effective thinking.",
    "body": "2021/09/03 - Memoirs theme has Prism highlighter integrated. I will show you in this post a few examples of how it looks if you are a developer planning to add pieces of code on your website. Links to some of the resources you might just find helpful. It just happens that:  If you can find answers to every where`, you can find a solution to any how. For Product Designers:    All In One Design Resources     Free photos     Create Prototypes     Material Design - Google     Human Interface Guidelines - Apple     Atlassian Design System - Atlassion     Carbon Design System - IBM     Check List For Any Design: Checklist, UX Archive, Mobbin, Really Good UX     Colors from Adobe     happyhues. co - color hues     Find Color Gradients     Hex Color Info     Check color Saturarions     Color Pigment by shapefactory     Duotones     Cool colors     Coolors     Duo Tone     Color Contrast checker     Color of anything     UI gradients     Color Mind     Color sampling     Gradient     Site Palette     Huesnap     Colorwise     iconfinder     EdWordle     PNG to ICO converter     Free Logos for any Project     Free Photos     Pxfuel photos     Free photos     Icon, Illustrations for Designers     Brand Resource     Page flows - Videos     Photoshop freebies     Free Design Resource     Font Brief     Find Screen Size     Pattern Monster     Eva Design System     color fonts     Peppertype. ai content creator     Greenkeeper Decision-support tool     Sell design stuff     Daily UI challenges: Become a better designer in 100 days     Illustrations     Beautiful free illustrations     Absurd Illustrations     Graphic Resources for Everyone     Illustrations     Build Sites with Google     Museum of Art     Archives of Letter forms     Museum of Brand and Packaging     Arts and Culture     Web Design Museum     The International Museum of Children’s Art     Street Art     Fashion and Design     Free Vector Illustration     Free Mockup     Open source Icon     Remove Background     UI Templates     Designers’ Secret Source     Latest Design Trends     Design Files     Landing pages store     Wireframes and mockups     Freebie UI     Royalty Free 404 pages     Free clip art     Emoji list     Tabler Icons     The noun project Icons &amp; illustration pack     LottieFiles:     Portfolio     IDEO tools/case studies     Make Giphy     Many Pixels Illustrations     Online vector art editor     Free videos     DeviantArt     Ello Art Gallery     ArtStation     Free Design ideas     Create questionare form     Build without code     Free 3D shapes     Shapes, Illustrations and Icons     Download Adinkra Icons     Pattern Generator- Pattern Monster     Free Illustration+scene     Feather Icons     Royalty Free Vectors     SVG Graphics     Mockups     App Screenshots     User Onboarding     Online photo editor     Customize Animate &amp; Download free Illustrations     Font Generator     font pairing     Present Design with Mockups: 3D Studio, Artboard, Mockup Frames, Smartmockups, Mockuphone, Mockuuuup Studio, Magic Mockups     UI Design Challenges     Learn Shape Tricks     Learn Alignment     Learn Typography     Learn Pen Tricks     Learn Typeface     Learn Color     Online Vector Editor     Ben Sounds  For Software Developers:    Developer Roadmap     All Tiny Helpers     Find Developer Jobs     Find Your Next Dev Job     Relevant Tech Roles     Learn CSS Grid     CSS Layout     Web Skills     Keyframes, Color pallete,shadows     CSS Grid Generator     Learn modern css     Check List For Any Design: Checklist, UX Archive, Mobbin, Really Good UX     Gradient, Radius, Texture, Shadow Generator     css reference     Coding fantasy Games     Many UI Components to build faster     List of other lists     HTML Standard Practices     Gradient Color     Recite me Accessibility Tool     Web Stories     React Examples     Analyze suspicious links     A list of lists     Resources-for-Students     Free dev resources     Css Gradient     Dev Hints     Unicode Character Table     CSS Validator     Learn Development by practice     css framework     React Framework     iCreate Regex     Responsive test app: responsively app     Learn Nextjs     GitHub Profile ReadMe Generator     Learn React     Create documentation pages     Contribute to open source     Source Code Beautifier     Excercism Coding exercise     Terminal music     HTML Guide     Web Guide     Mock APIS     Secure JS Code     Learn about content security policy     Download karma for automated testing     Learn Ngrx     Has your email been leaked?     Temporal Email     CSS Diner Game     check io Games     CSS library     Learn To Code With Fun     DevSamples: Code samples     Netlify deploy static sites     Tech updates     Useful dev code snippets     Learn to Code with Games for kids     Coding Games     Learn from Googlers     Code Snippets     Jekyll tutorial     Learn Flutter     Github Learning     Interactive git playground     Code snippets     HTML CSS code snippet     20 React tools     Frontend Mentor     Web Dev Resources     React Components     Bots     Learn Programming     APIs     Apps Data     Free Dev stuff     Fun JS Projects     Awesome Python     Public APIs     Junior Dev Jobs     Sidebar IO for CSS     Coding interview     Dev Read     Budibase     Web Analytics     V8 engine     Webmasters     Generate Readme File for Project     Software Development     learn vanilla js     Super tools     Animate on scroll     Become A Software Developer     Join Virtual Workspace     CSS Quizzes     CSS Grid with WeBos     Learn Web Dev - Full Statck     Learn Programming with Khan Academey     Codewell Challenges  For Product Managers:    Email Marketing Tools: MailChimp, Constant Contact, Emma, Email Octopus     Focus Mate     Find Professional Emails     Clean Your Online Presence     passwordwolf. com     Spreadsheet Database     Forms: Formstack, Typeform, Jotform     Create podcast for free     Sign petition     Calender for Meetings     Content Management     Content Management     Keyword generator     Google Keyword Tool     Paid Keyword ranking     Keyword Search     SEO     Get Business Online     SEO: Ahrefs Master Tools     Find Udemy Discounts     realdiscount. com     Test Automation University     Teams Management Tool     Webmaster SEO     classroom App for Fun     A/B Testing     Voice dictation     Notion all-in-one workspace     Internship opportunities     Read UX Articles     Create Email Signature     Create Calendar Meetings     Free Email Signature     Title Generator     Hand-drawn Slide Deck     Our World In Data     Google Scholar Search     Calendar Booking Software  "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><span class='body'>"+ body +"</span><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-primary btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><small><span class='body'>"+ body +"</span><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});